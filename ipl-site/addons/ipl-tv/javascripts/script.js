// Generated by CoffeeScript 1.3.3
(function() {
  var LivePlayer, gettingLiveChannels, jsonURL, updateLayout;

  jsonURL = "http://esports.ign.com/live_channels.json";

  if (test) {
    jsonURL = "http://esports.ign.com/live_channels_" + test + "_test.json";
  }

  gettingLiveChannels = $.ajax({
    url: jsonURL,
    dataType: "jsonp",
    cache: true,
    jsonpCallback: "getCachedLiveChannels"
  });

  gettingLiveChannels.done(function(data) {
    var $container, channel, i, index, player, players, _i, _j, _len, _len1;
    $container = $("#video-container");
    viewModel.liveChannelsJSON(data);
    viewModel.chatchannel(viewModel.liveChannelsJSON()[0].name);
    switch (viewModel.liveChannelsJSON().length) {
      case 1:
        viewModel.layout("one");
        break;
      case 2:
        viewModel.layout("two");
        break;
      case 3:
        viewModel.layout("three");
        break;
      case 4:
        viewModel.layout("four");
        break;
      case 5:
        viewModel.layout("five");
        break;
      case 6:
        viewModel.layout("six");
        break;
      default:
        viewModel.layout("one");
    }
    $("#main").attr("class", viewModel.layout());
    players = [];
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      channel = data[i];
      players.push(LivePlayer.loadPlayer(channel, i));
    }
    for (index = _j = 0, _len1 = players.length; _j < _len1; index = ++_j) {
      player = players[index];
      $container.append(player);
    }
    return LivePlayer.setVolume();
  });

  gettingLiveChannels.fail(function(a, b, c) {
    return console.log(a, b, c);
  });

  LivePlayer = {
    loadPlayer: function(channel, index) {
      var containerhtml, descriptionhtml, selectList, volume;
      volume = index === 0 ? 50 : 0;
      containerhtml = "<div class='player-wrapper video-" + (index + 1) + "'><div class='keep-aspect-ratio'><img src='http://media.ign.com/ev/esports/ipl-static/ipl-site/images/aspect-ratio-16-9.png' /><div class='video-wrapper'>";
      selectList = viewModel.liveChannelsJSON().length > 1 ? this.selectList(channel) : "";
      descriptionhtml = "<div class='description clearfix'><h4>" + channel.description + "</h4>" + selectList + "</div>";
      return containerhtml += this.objectHTML(channel, volume) + "</div></div>" + descriptionhtml + "</div>";
    },
    selectList: function(currentChannel) {
      var channel, listhtml, _i, _len, _ref;
      listhtml = "<select>";
      _ref = viewModel.liveChannelsJSON();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        channel = _ref[_i];
        listhtml += "<option value='" + channel.name + "' " + (channel.name === currentChannel.name ? 'selected' : '') + ">" + channel.name + "</option>";
      }
      return listhtml += "</select>";
    },
    objectHTML: function(channel, volume) {
      if (volume == null) {
        volume = 0;
      }
      if (_gaq) {
        _gaq.push(['_trackEvent', 'Live Play', channel.franchise_slug, channel.description]);
      }
      comscoreEvent.fireVideoView();
      return '<object type="application/x-shockwave-flash" height="100%" width="100%" data="http://www.justin.tv/widgets/jtv_player.swf?channel=' + channel.name + '"><param name="movie" value="http://www.justin.tv/widgets/jtv_player.swf"><param name="flashvars" value="start_volume=' + volume + '&channel=' + channel.name + '&auto_play=true&enable_javascript=true&consumer_key=96OPe6EWesFs5PdLgQzxA"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><param name="allowNetworking" value="all"><param name="wmode" value="transparent"></object>';
    },
    setVolume: function() {
      var index, player, playerCollection, setMute, _i, _len, _results;
      playerCollection = document.getElementsByTagName("object");
      setMute = function(player, index) {
        var playerSet;
        return playerSet = setInterval(function() {
          if (typeof player.mute === "function" && typeof player.unmute === "function") {
            if (index === 0) {
              setTimeout(function() {
                player.unmute();
                return clearInterval(playerSet);
              }, 500);
            }
            if (index !== 0 && typeof player.mute === "function") {
              return setTimeout(function() {
                player.mute();
                return clearInterval(playerSet);
              }, 500);
            }
          }
        }, 50);
      };
      _results = [];
      for (index = _i = 0, _len = playerCollection.length; _i < _len; index = ++_i) {
        player = playerCollection[index];
        _results.push(setMute(player, index));
      }
      return _results;
    }
  };

  updateLayout = function(layout) {
    return $("#main").removeClass().addClass(layout);
  };

  $("#layout-switch").find("a").click(function(e) {
    e.preventDefault();
    viewModel.layout($(this).data("layout"));
    return $(".player-wrapper").each(function() {
      var $this;
      $this = $(this);
      $this.css("max-width", "");
      return $this.css("width", "");
    });
  });

  $("aside").on("webkitTransitionEnd", function(e) {
    return $(".player-wrapper").each(function() {
      var $this, maxWidth, width;
      $this = $(this);
      if ($(this).css("left") === "100%") {
        maxWidth = $this.css("max-width");
        $this.css("max-width", maxWidth);
        width = $this.css("width");
        return $this.css("width", width);
      } else {
        $this.css("max-width", "");
        return $this.css("width", "");
      }
    });
  });

  $("#video-container").on("change", "select", function(e) {
    var channel, channelhtml, selectedchannel, _i, _len, _ref;
    _ref = viewModel.liveChannelsJSON();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      channel = _ref[_i];
      if (channel.name === this.value) {
        selectedchannel = channel;
      }
    }
    channelhtml = LivePlayer.objectHTML(selectedchannel);
    if (channelhtml) {
      $(this).siblings("h4").html(selectedchannel.description);
      return $(this).parent().siblings(".keep-aspect-ratio").find("object").replaceWith(channelhtml);
    }
  });

}).call(this);
