// Generated by CoffeeScript 1.4.0
(function() {
  var Poll, authCheck, checkForNewPolls, displayName, fetchNewPoll, getPoll, getPolls, getStreams, loadPolls, loadUser, newPollInterval, restrictedCountries, returningVote, updatingVote, userId, _mediaUrl, _url;

  if (document.location.hostname !== "www.ign.com") {
    _url = "localhost:3000";
    _mediaUrl = "localhost:8888/media";
  } else {
    _url = "esports.ign.com";
    _mediaUrl = "media.ign.com";
  }

  $.ajaxSetup({
    dataType: "jsonp",
    cache: true
  });

  restrictedCountries = ["United States", "France", "Spain", "Denmark", "Netherlands", "Belgium"];

  userId = 21;

  displayName = "Anonymous user";

  returningVote = false;

  updatingVote = false;

  fetchNewPoll = 30000;

  newPollInterval = "";

  Poll = (function() {

    function Poll(poll) {
      this.poll = poll;
      this.stream = poll.stream.id || null;
      this.fetchUpdateInterval = 10000;
    }

    Poll.prototype.calculatePercent = function(votes) {
      var percent;
      percent = parseInt(Math.round(votes / this.poll.total * 100), 10);
      if (isNaN(percent)) {
        return 50;
      } else {
        return percent;
      }
    };

    Poll.prototype.getVotes = function(name) {
      var player, _i, _len, _ref;
      _ref = this.poll.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.name === name) {
          return player.votes;
        }
      }
    };

    Poll.prototype.getPayouts = function(userId) {
      var fetchingPayouts,
        _this = this;
      if (!userId) {
        return false;
      }
      fetchingPayouts = $.ajax({
        url: "http://" + _url + "/vote/v1/payouts/" + this.poll.id + "/" + userId,
        jsonpCallback: "getCachedPayouts"
      });
      fetchingPayouts.done(function(data) {
        if (userId === 21) {
          _this.poll.payout = 0;
          return _this.votedValue = "";
        } else {
          _this.poll.payout = data.payout;
          _this.votedValue = data.name;
          return _this.$el.find("i").each(function(index) {
            var $this;
            $this = $(this);
            if ($this.data("value") === data.name) {
              $this.addClass("disabled");
              $this.find(".potential-payout").text("Your payout: ");
              return $this.find(".potential").text(data.payout);
            }
          });
        }
      });
      return fetchingPayouts.fail(function(jqxhr, status, text) {
        return console.log(jqxhr, status, text);
      });
    };

    Poll.prototype.postVote = function() {
      var postingVote,
        _this = this;
      postingVote = $.ajax({
        url: "http://" + _url + "/vote/v1/votes/" + this.poll.id,
        type: "POST",
        dataType: "json",
        data: {
          option: {
            name: this.votedValue
          },
          user: {
            id: userId,
            name: displayName
          }
        }
      });
      postingVote.done(function(data) {
        var index, player, _i, _len, _ref;
        returningVote = true;
        _ref = data.options;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          player = _ref[index];
          if (player.selected === true && userId !== 21) {
            _this.payout = player.payout;
            _this.$el.find(".potential.team-" + (index + 1)).html(player.payout);
          }
        }
        return _this.submittingPoll();
      });
      return postingVote.fail(function(jqxhr, status, text) {
        return console.log(jqxhr, status, text);
      });
    };

    Poll.prototype.updateVotes = function(target) {
      var $el, $target,
        _this = this;
      $el = this.$el;
      target = target.nodeName === "I" ? target : $(target).parents("i")[0];
      $target = $(target);
      $el.addClass("isSubmitting");
      this.votedValue = $target.data("value");
      $(".disabled").removeClass("disabled").find(".potential-payout").text("Payout: ");
      $target.addClass("disabled");
      $target.find(".potential-payout").text("Your Payout: ");
      if (this.votedValue != null) {
        this.postVote();
      }
      setTimeout(function() {
        updatingVote = true;
        return _this.submittingPoll();
      }, 3000);
      return false;
    };

    Poll.prototype.updatePoll = function() {
      var getPollInterval, poll, _this;
      _this = this;
      poll = this.poll;
      clearInterval(getPollInterval);
      if (poll == null) {
        return false;
      }
      if (poll.state === "inactive") {
        return updatePollView();
      } else {
        return getPollInterval = setInterval(function() {
          var gettingPoll;
          gettingPoll = getPoll(poll.id);
          return gettingPoll.done(function(updatedPoll) {
            poll.total = updatedPoll.total;
            poll.options = updatedPoll.options;
            poll.state = updatedPoll.state;
            return _this.updatePollView();
          });
        }, this.fetchUpdateInterval);
      }
    };

    Poll.prototype.setupHandlers = function() {
      var _this;
      _this = this;
      return this.$el.find(".label i").click(function(evt) {
        evt.preventDefault();
        if (!$(this).hasClass("disabled")) {
          return _this.updateVotes(this);
        }
      });
    };

    Poll.prototype.createPoll = function(el) {
      var chartHTML, index, payout, percent, percentHTML, player, poll, pollHTML, votes, _i, _len, _ref;
      poll = this.poll;
      chartHTML = '<div class="chart clearfix">';
      percentHTML = '';
      pollHTML = "<div id='" + poll.id + "' class='poll_results'>\n  <div class=\"label clearfix\">\n    <h4>Who Will Win Game " + poll.matchup.game.number + "?</h4>";
      _ref = poll.options;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        player = _ref[index];
        if (index === 2) {
          break;
        }
        payout = player.payout;
        votes = player.votes || 0;
        percent = this.calculatePercent(votes);
        percentHTML += "<span class='team-" + (index + 1) + " team-percent'>" + percent + "%</span>";
        chartHTML += "<div class='percent team-" + (index + 1) + "' style='width: " + percent + "%' data-team='team-" + (index + 1) + "' data-value='" + player.name + "'></div>";
        pollHTML += "<div class=\"team-" + (index + 1) + "\">\n  <i data-value=\"" + player.name + "\" data-team=\"team-" + (index + 1) + "\">\n    <p class='player'>" + player.name + "</p>\n    <p class='potential-label'><span class=\"potential-payout\">Payout: </span><span class='potential team-" + (index + 1) + "'>" + payout + "</span></p>\n  </i>\n</div>";
        if (index === 0) {
          pollHTML += "<span class='separator'> or </span>";
        }
      }
      pollHTML += '<div class="cover"></div></div>';
      chartHTML += "</div>";
      pollHTML += percentHTML + chartHTML;
      pollHTML += "<p class='signin'></p>";
      pollHTML += "</div>";
      $(el).html(pollHTML);
      this.el = document.getElementById(poll.id);
      this.$el = $(this.el);
      return this.setupHandlers();
    };

    Poll.prototype.updatePollView = function() {
      var $poll, index, percent, player, _i, _len, _ref, _results;
      $poll = this.$el;
      if (this.poll.state === "inactive") {
        $poll.find(".label div > p").remove();
        $poll.find("h4").fadeOut("fast", function() {
          return $(this).text("Poll is now closed.").fadeIn("fast");
        });
        $poll.find("i").addClass("disabled");
        return setTimeout(function() {
          return $poll.fadeOut("slow", function() {
            return $(this).remove();
          });
        }, 5000);
      } else {
        _ref = this.poll.options;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          player = _ref[index];
          percent = this.calculatePercent(player.votes);
          if (!$poll.find(".team-" + (index + 1) + " i").hasClass("disabled")) {
            $poll.find(".team-" + (index + 1) + ".potential").html(player.payout);
          }
          $poll.find(".team-" + (index + 1) + ".percent").width("" + percent + "%");
          _results.push($poll.find(".team-" + (index + 1) + ".team-percent").html("" + percent + "%"));
        }
        return _results;
      }
    };

    Poll.prototype.submittingPoll = function() {
      if (returningVote === true && updatingVote === true) {
        this.$el.removeClass("isSubmitting");
        returningVote = false;
        return updatingVote = false;
      }
    };

    return Poll;

  })();

  getPoll = function(pollId) {
    return $.ajax({
      url: "http://" + _url + "/vote/v1/polls/" + pollId,
      jsonpCallback: "getCachedPoll"
    });
  };

  getPolls = function(streamId) {
    var stream;
    stream = streamId != null ? "?stream=" + streamId : "";
    return $.ajax({
      url: "http://" + _url + "/vote/v1/polls" + stream,
      jsonpCallback: "getCachedPolls"
    });
  };

  authCheck = function() {
    return $.ajax({
      url: "http://esports.ign.com/auth/v1/users/current/",
      cache: false
    });
  };

  getStreams = function() {
    return $.ajax({
      url: "http://esports.ign.com/content/v1/streams.json",
      jsonpCallback: "getCachedStreams"
    });
  };

  checkForNewPolls = function(streamId) {
    clearInterval(newPollInterval);
    if (streamId == null) {
      return false;
    }
    return newPollInterval = setInterval(function() {
      var fetchingPolls;
      fetchingPolls = getPolls(streamId);
      return fetchingPolls.done(function(polls) {
        if ($("#" + polls[0].id).length === 0) {
          return loadPolls(polls, streamId);
        }
      });
    }, fetchNewPoll);
  };

  loadUser = function(poll, userData) {
    if (userData === null) {
      return poll.$el.find(".signin").html("<a href='https://s.ign.com/'>Log in</a> to vote!");
    } else {
      userId = userData.profileId;
      displayName = userData.displayName;
      poll.$el.find(".signin").html("signed in as " + displayName);
      return poll.getPayouts(userId);
    }
  };

  loadPolls = function(pollData, streamId) {
    var checkingAuth, poll, polls, _i, _len;
    polls = "";
    for (_i = 0, _len = pollData.length; _i < _len; _i++) {
      poll = pollData[_i];
      if (!(poll.state === "active")) {
        continue;
      }
      poll = new Poll(poll);
      break;
    }
    checkingAuth = authCheck();
    checkingAuth.done(function(data) {
      return loadUser(poll, data);
    });
    checkingAuth.fail(function(jqxhr, status, text) {
      return console.log(jqxhr, status, text);
    });
    poll.createPoll("#poll_container");
    return poll.updatePoll();
  };

  window.switchStreams = function(streamId) {
    var fetchingPolls;
    $("#poll_container").empty();
    fetchingPolls = getPolls(streamId);
    fetchingPolls.done(function(polls) {
      return loadPolls(polls, streamId);
    });
    return checkForNewPolls(streamId);
  };

  $("#featured").delegate(".signin a", "click", function(evt) {
    var gettingLogin;
    evt.preventDefault();
    gettingLogin = $.ajax({
      url: "http://widgets.ign.com/social/shared/registration/signin.jsonp?disable_js=false&r=" + (encodeURIComponent(document.location.href))
    });
    return gettingLogin.done(function(registration) {
      return $("body").append(registration);
    });
  });

}).call(this);
