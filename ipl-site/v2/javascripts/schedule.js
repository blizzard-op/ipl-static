// Generated by CoffeeScript 1.4.0
(function() {
  var today, week;

  today = moment().sod().format();

  week = moment().add("days", 6).eod().format();

  Handlebars.registerHelper('formattedDateTime', function() {
    var text;
    text = moment(this.starts_at.dateTime).format("h:mma");
    return new Handlebars.SafeString(text);
  });

  Handlebars.registerHelper('today', function() {
    if (this[0].startWeekDay === moment().format("dddd")) {
      return '<div class="schedule_calendar today">';
    }
    return '<div class="schedule_calendar">';
  });

  (function() {
    var fetchingEvents;
    fetchingEvents = $.ajax({
      url: "http://esports.ign.com/content/v1/events.json?startDate=" + today + "&endDate=" + week,
      dataType: "jsonp",
      cache: true,
      jsonpCallback: "getCachedEvents"
    });
    return fetchingEvents.done(function(events) {
      var date, dates, diff, firstEvent, formattedDay, groupOfEvents, key, mdate, newDate, previousDay, rows, scheduleTemplate, tmpl, value, _i, _len;
      rows = '';
      groupOfEvents = _.chain(events.filter(function(event) {
        if (franchise === "all") {
          return event;
        } else {
          return event.franchise.slug === franchise;
        }
      })).groupBy(function(event) {
        return moment(event.starts_at.dateTime).format("MM-DD-YYYY");
      }).value();
      dates = [];
      previousDay = moment();
      for (key in groupOfEvents) {
        value = groupOfEvents[key];
        dates.push(key);
        formattedDay = moment(key);
        diff = formattedDay.diff(previousDay, "days");
        while (diff > 1) {
          newDate = previousDay.add("days", 1).format("MM-DD-YYYY");
          dates.push(newDate);
          groupOfEvents[newDate] = [
            {
              startTime: newDate
            }
          ];
          diff -= 1;
        }
        previousDay = formattedDay;
      }
      dates.sort();
      scheduleTemplate = $("#schedule-template").html();
      tmpl = Handlebars.compile(scheduleTemplate);
      for (_i = 0, _len = dates.length; _i < _len; _i++) {
        date = dates[_i];
        mdate = moment(date);
        firstEvent = groupOfEvents[date][0];
        firstEvent.startDay = mdate.date();
        firstEvent.startWeekDay = mdate.format("dddd");
        firstEvent.startMonth = mdate.format("MMM");
        firstEvent.startYear = mdate.year();
        rows += tmpl(groupOfEvents[date]);
      }
      return $("#schedule").append(rows);
    });
  })();

}).call(this);
